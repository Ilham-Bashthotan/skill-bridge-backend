### Admin API Manual Testing

# Variables
@baseUrl = http://localhost:3000
@adminToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJhZG1pbkBleGFtcGxlLmNvbSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTczNDc5MjAwMCwiZXhwIjoxNzM0ODc4NDAwfQ.abc123
@userId = 1
@newUserId = 2

### 1. Get Admin Dashboard (Protected - Admin Only)
GET {{baseUrl}}/admin/dashboard
Authorization: Bearer {{adminToken}}

### 2. Get Admin Profile (Protected - Admin Only)
GET {{baseUrl}}/admin/profile
Authorization: Bearer {{adminToken}}

### 3. Update Admin Profile (Protected - Admin Only)
PUT {{baseUrl}}/admin/profile
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "name": "Updated Admin Name",
  "phone": "+1234567890",
  "bio": "Updated admin bio",
  "experience": "5+ years in administration"
}

### 4. Get All Users with Pagination (Protected - Admin Only)
GET {{baseUrl}}/admin/users?page=1&limit=10
Authorization: Bearer {{adminToken}}

### 5. Get Users with Role Filter (Protected - Admin Only)
GET {{baseUrl}}/admin/users?role=student&page=1&limit=5
Authorization: Bearer {{adminToken}}

### 6. Get Users with Different Role Filter (Protected - Admin Only)
GET {{baseUrl}}/admin/users?role=mentor&page=1&limit=5
Authorization: Bearer {{adminToken}}

### 7. Create New User (Protected - Admin Only)
POST {{baseUrl}}/admin/users
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "name": "New User",
  "email": "newuser@example.com",
  "password": "password123",
  "phone": "+1234567890",
  "role": "student"
}

### 8. Create New Admin (Protected - Admin Only)
POST {{baseUrl}}/admin/admins
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "name": "New Admin",
  "email": "newadmin@example.com",
  "password": "admin123",
  "phone": "+1234567891",
  "bio": "New admin biography",
  "experience": "2+ years in management"
}

### 9. Create New Mentor (Protected - Admin Only)
POST {{baseUrl}}/admin/mentors
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "name": "New Mentor",
  "email": "newmentor@example.com",
  "password": "mentor123",
  "phone": "+1234567892",
  "bio": "Experienced mentor in tech",
  "experience": "10+ years in software development"
}

### 10. Update User Role (Protected - Admin Only)
PUT {{baseUrl}}/admin/users/{{newUserId}}/role
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "role": "mentor"
}

### 11. Update User Role Back to Student (Protected - Admin Only)
PUT {{baseUrl}}/admin/users/{{newUserId}}/role
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "role": "student"
}

### 12. Delete User (Protected - Admin Only)
DELETE {{baseUrl}}/admin/users/{{newUserId}}
Authorization: Bearer {{adminToken}}

### 13. Test Unauthorized Access - No Token
GET {{baseUrl}}/admin/dashboard

### 14. Test Unauthorized Access - Invalid Token
GET {{baseUrl}}/admin/dashboard
Authorization: Bearer invalid_token

### 15. Test Forbidden Access - Student Token (if you have one)
# GET {{baseUrl}}/admin/dashboard
# Authorization: Bearer {{studentToken}}

### 16. Test Invalid User ID for Role Update
PUT {{baseUrl}}/admin/users/999/role
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "role": "mentor"
}

### 17. Test Invalid User ID for Delete
DELETE {{baseUrl}}/admin/users/999
Authorization: Bearer {{adminToken}}

### 18. Test Create User with Duplicate Email
POST {{baseUrl}}/admin/users
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "name": "Duplicate User",
  "email": "admin@example.com",
  "password": "password123",
  "phone": "+1234567893",
  "role": "student"
}

### 19. Test Create User with Invalid Role
POST {{baseUrl}}/admin/users
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "name": "Invalid Role User",
  "email": "invalid@example.com",
  "password": "password123",
  "phone": "+1234567894",
  "role": "invalid_role"
}

### 20. Test Update Profile with Empty Body
PUT {{baseUrl}}/admin/profile
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{}

### 21. Test Invalid User ID Format for Role Update
PUT {{baseUrl}}/admin/users/abc/role
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "role": "mentor"
}

### 22. Test Invalid User ID Format for Delete
DELETE {{baseUrl}}/admin/users/abc
Authorization: Bearer {{adminToken}}

### Notes for Testing:
# 1. First, create an admin user through the auth/register endpoint or database seeding
# 2. Login as admin using auth/login endpoint to get a valid JWT token
# 3. Replace {{adminToken}} with the actual JWT token received from login
# 4. Replace {{userId}} and {{newUserId}} with actual user IDs from your database
# 5. Update the {{baseUrl}} if your server runs on a different port

### Expected Status Codes:
# 200 OK: GET requests, PUT requests, DELETE requests (successful)
# 201 Created: POST requests (successful)
# 400 Bad Request: Invalid input data, invalid user ID format
# 401 Unauthorized: Missing or invalid token
# 403 Forbidden: Insufficient permissions (non-admin trying to access admin endpoints)
# 404 Not Found: User not found
# 409 Conflict: Email already exists