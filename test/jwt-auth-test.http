# JWT Authentication Testing

## Base URL
@baseUrl = http://localhost:3000

### 1. Register new user
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "name": "Test Student JWT",
  "email": "test.jwt@example.com",
  "phone": "08123456789",
  "password": "password123"
}

### 2. Login to get JWT token
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "test.jwt@example.com",
  "password": "password123"
}

### Store the JWT token from login response:
@jwtToken = Bearer PUT_YOUR_TOKEN_HERE

### 3. Test unified profile endpoint (should work for any role)
GET {{baseUrl}}/auth/profile
Authorization: {{jwtToken}}

### 4. Update profile via unified endpoint
PUT {{baseUrl}}/auth/profile
Authorization: {{jwtToken}}
Content-Type: application/json

{
  "name": "Test Student JWT Updated",
  "phone": "08198765432",
  "bio": "Testing JWT authentication system",
  "experience": "Learning NestJS with JWT"
}

### 5. Test unified dashboard (role-based response)
GET {{baseUrl}}/dashboard
Authorization: {{jwtToken}}

### 6. Test student-specific endpoint (requires STUDENT role)
GET {{baseUrl}}/students/dashboard
Authorization: {{jwtToken}}

### 7. Test student courses (role-protected)
GET {{baseUrl}}/students/courses?page=1&limit=5
Authorization: {{jwtToken}}

### 8. Change password
PUT {{baseUrl}}/auth/change-password
Authorization: {{jwtToken}}
Content-Type: application/json

{
  "current_password": "password123",
  "new_password": "newpassword123"
}

###
### ERROR TESTING - Role-based Access
###

### Test: Try to access mentor endpoint as student (should fail)
GET {{baseUrl}}/mentors/dashboard
Authorization: {{jwtToken}}

### Test: Access student endpoint without token (should fail)
GET {{baseUrl}}/students/dashboard

### Test: Access with invalid token (should fail)
GET {{baseUrl}}/students/dashboard
Authorization: Bearer invalid.jwt.token.here

### Test: Register with existing email (should fail)
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "name": "Duplicate User",
  "email": "test.jwt@example.com",
  "phone": "08123456789",
  "password": "password123"
}

### Test: Login with wrong password (should fail)
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "test.jwt@example.com",
  "password": "wrongpassword"
}

###
### MENTOR TESTING (Need to manually create mentor in DB or register with mentor role)
###

### Register mentor user (if registration allows role specification)
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "name": "Test Mentor JWT",
  "email": "test.mentor.jwt@example.com",
  "phone": "08198765432",
  "password": "mentorpass123"
}

### Login as mentor
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "email": "test.mentor.jwt@example.com",
  "password": "mentorpass123"
}

### Store mentor token
@mentorToken = Bearer PUT_MENTOR_TOKEN_HERE

### Test mentor dashboard (requires MENTOR role)
GET {{baseUrl}}/mentors/dashboard
Authorization: {{mentorToken}}

### Test mentor accessing student endpoint (should fail)
GET {{baseUrl}}/students/dashboard
Authorization: {{mentorToken}}